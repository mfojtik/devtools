
/*
 This file was autogenerated via
 ----------------------------------------------
 ldetool generate --package request request.lde
 ----------------------------------------------
 do not touch it with bare hands!
*/

package request

import (
	"bytes"
	"fmt"
	"strconv"
	"unsafe"
)

var colonSpace = []byte(": ")
var rbrackSpace = []byte(") ")

// Line ...
type Line struct {
	rest       []byte
	Verb       []byte
	Path       []byte
	Duration   []byte
	StatusCode int16
}

// Extract ...
func (p *Line) Extract(line []byte) (bool, error) {
	p.rest = line
	var err error
	var pos int
	var tmp []byte
	var tmpInt int64

	// Take until ' ' as Verb(string)
	pos = bytes.IndexByte(p.rest, ' ')
	if pos >= 0 {
		p.Verb = p.rest[:pos]
		p.rest = p.rest[pos+1:]
	} else {
		return false, nil
	}

	// Take until ": " as Path(string)
	pos = bytes.Index(p.rest, colonSpace)
	if pos >= 0 {
		p.Path = p.rest[:pos]
		p.rest = p.rest[pos+len(colonSpace):]
	} else {
		return false, nil
	}

	// Checks if the rest starts with '(' and pass it
	if len(p.rest) >= 1 && p.rest[0] == '(' {
		p.rest = p.rest[1:]
	} else {
		return false, nil
	}

	// Take until ") " as Duration(string)
	pos = bytes.Index(p.rest, rbrackSpace)
	if pos >= 0 {
		p.Duration = p.rest[:pos]
		p.rest = p.rest[pos+len(rbrackSpace):]
	} else {
		return false, nil
	}

	// Take until ' ' as StatusCode(int16)
	pos = bytes.IndexByte(p.rest, ' ')
	if pos >= 0 {
		tmp = p.rest[:pos]
		p.rest = p.rest[pos+1:]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(*(*string)(unsafe.Pointer(&tmp)), 10, 16); err != nil {
		return false, fmt.Errorf("Cannot parse `%s`: %s", string(tmp), err)
	}
	p.StatusCode = int16(tmpInt)

	return true, nil
}
